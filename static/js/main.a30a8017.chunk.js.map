{"version":3,"sources":["components/Image.js","components/Modal.js","components/displayAlbums.js","components/Search.js","components/Home.js","App.js","actions/index.js","serviceWorker.js","reducers/root.js","index.js","epics/index.js"],"names":["Image","src","this","props","source","className","class","onClick","send","index","title","genre","label","style","alt","Component","Modal","display","closeModal","info","DisplayAlbums","state","showModal","setState","console","log","artistData","map","album","key","id","cover_image","year","Search","input","Value","e","value","target","length","onChange","type","getSearchedBand","Home","getAllBands","a","axios","get","res","data","results","pagination","artist","resource_url","number","Math","floor","random","getRandomBand","App","connect","isPinging","ping","Boolean","window","location","hostname","match","pingpong","action","combineReducers","artistDataReducer","epicMiddleware","createEpicMiddleware","store","createStore","applyMiddleware","run","action$","pipe","ofType","delay","mapTo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a30a8017.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Image extends Component {\n  render() {\n    return (\n      <img\n        src={this.props.source}\n        className={this.props.class}\n        onClick={() => {\n          this.props.send(\n            this.props.index,\n            this.props.title,\n            this.props.source,\n            this.props.genre,\n            this.props.label,\n            this.props.style\n          )\n        }}\n        alt={this.props.title} />\n    )\n  }\n}\nexport default Image;\n","import React, { Component } from 'react';\nimport Image from './Image';\n\nclass Modal extends Component {\n\n  render() {\n\n    return (\n\n      <div className={\n        this.props.display === true ? 'modal display-block' : 'modal display-none'\n      } >\n        <section className='modal-main'>\n          <div className='modal-container'>\n            <button className='modal-button close' onClick={() => { this.props.closeModal() }}>  X </button>\n            <h2> {this.props.info.src} </h2>\n            <p> {this.props.info.genre} </p>\n            <p> {this.props.info.label} </p>\n            <p> {this.props.info.style} </p>\n            <Image\n              source={this.props.info.title}\n              class={\"album-display unclick\"}\n            />\n          </div>\n        </section>\n      </div >\n    )\n  }\n}\nexport default Modal;\n","import React, { Component } from 'react';\nimport Image from './Image';\nimport Modal from './Modal';\n\nclass DisplayAlbums extends Component {\n  state = {\n    display: false,\n    info: {\n      index: 0,\n      title: \"\",\n      src: \"\",\n      genre: [],\n      label: [],\n      style: []\n    }\n  }\n\n  showModal = (\n    index,\n    src,\n    title,\n    genre,\n    label,\n    style\n  ) => {\n    this.setState({ display: true });\n    this.setState({\n      info: {\n        src: src,\n        title: title,\n        genre: genre,\n        label: label,\n        style: style\n      }\n    })\n    console.log(\"index\", index)\n  }\n  closeModal = () => {\n    this.setState({ display: false });\n  }\n\n  render() {\n    return (\n      <div className=\"albums\">\n        {this.props.artistData.map((album, index) =>\n          <div className=\"album-display\"\n            key={album.id} >\n            <Modal\n              info={this.state.info}\n              display={this.state.display}\n              closeModal={this.closeModal}\n            />\n            <Image\n              index={index}\n              title={album.title}\n              source={album.cover_image}\n              genre={album.genre}\n              label={album.label}\n              style={album.style}\n              send={this.showModal}\n              class={\"album-display\"}\n            />\n            <h3> {album.title} </h3>\n            <p> {this.index} </p>\n            <p> {album.genre}  </p>\n            <p> {album.year}  </p>\n          </div>\n\n        )}\n\n        {/* <Album\n          click={this.showModal}\n          ruta={\"album desde displayAlbum\"}\n          artistData={this.props.artistData}\n        /> */}\n\n      </div>\n    );\n  }\n}\nexport default DisplayAlbums;","import React, { Component } from 'react';\nimport DisplayAlbums from './displayAlbums';\n\nclass Search extends Component {\n  state = {\n    input: '',\n  }\n  Value = (e) => {\n    const value = e.target.value\n    value.length === 0 ? this.setState(() => ({ input: [] })) : this.setState(({ input: value }))\n    return value\n  }\n  render() {\n    return (\n      <div className=\"Search\" >\n        <div className=\"search-header\">\n          <h3>Discogs </h3>\n          <h2>{this.props.input} </h2>\n          <input\n            onChange={this.Value} type=\"text\" />\n          <button onClick={() => { this.props.getSearchedBand(this.state.input) }}> buscar </button>\n        </div>\n        <div className=\"Sections\">\n          <DisplayAlbums artistData={this.props.artistData} />\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Search from './Search';\n\n\n\nclass Home extends Component {\n  state = {\n    input: '',\n    artistData: [],\n  }\n  componentDidMount() {\n    this.getAllBands()\n  }\n  componentDidUpdate() {\n    console.log(\"artistData from update\", this.state.artistData)\n    console.log(\"resource_url from update\", this.state.artistData.resource_url)\n  }\n\n  getAllBands = async () => {\n    // const res = await axios.get(`https://api.discogs.com/database/search?&token=gQSRUSJcpTLakilhMvhtYwsNHtcwCMaKGeEqZPJh`);\n    const res = await axios.get(`https://api.discogs.com/database/search?artist=306&token=gQSRUSJcpTLakilhMvhtYwsNHtcwCMaKGeEqZPJh`);\n    console.log(\"res, first data\", res)\n    const { results, pagination } = await res.data\n    this.setState({ artistData: results })\n  }\n  getSearchedBand = async (artist) => {\n    const res = await axios.get(`https://api.discogs.com/database/search?artist=${artist}&token=gQSRUSJcpTLakilhMvhtYwsNHtcwCMaKGeEqZPJh`);\n    console.log(\"res\", res)\n    console.log(\"artist\", artist)\n    const { results, pagination } = await res.data\n    console.log(\"Searched band \", results)\n    this.setState({ artistData: results })\n    return results\n  }\n  getRandom() {\n    const number = Math.floor(Math.random() * 1001);\n    console.log(number)\n    return number\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <Search\n          input={this.state.input}\n          artistData={this.state.artistData}\n          getSearchedBand={this.getSearchedBand}\n          getRandomBand={this.getRandomBand}\n        />\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { ping } from './actions/index'\nimport Home from './components/Home'\n\n//TODO  (1.-) The action is getting imported from te actions folder\n\n\n//? Down here, app is calling {isPinging,ping} as props\n// let App = ({ isPinging, ping }) => (\n//   <div>\n//     <h1>is pinging: {this.props.isPinging.toString()}</h1>\n//     <button onClick={this.props.ping}>Start PING</button>\n//     {/*  (2.-)The onclick event triggers the ping ACTION we imported, dispatching it to the reducers  */}\n//   </div>\n// );\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" >\n        <Home />\n        {/* <div>\n          <h1>is pinging: {this.props.isPinging.toString()}</h1>\n          <button onClick={this.props.ping}>Start PING</button>\n        </div> */}\n        {/*  (2.-)The onclick event triggers the ping ACTION we imported, dispatching it to the reducers  */}\n\n\n      </div >\n    );\n  }\n}\nconst mapStateToProps = state => ({ ...state });\nApp = connect(\n  ({ isPinging }) => ({ isPinging }),\n  { ping }\n  //TODO (3.-) \n  //? Here the 'ping' function that we got from action is connecting it and adding it to the props \n)(App);\n// const mapDispatchToProps = dispatch =>\n// bindActionCreators({\n// fetchPokemon\n// }, dispatch);\n\n\n// const CounterContainer = connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(Counter);\n\n\n\nexport default App;\n","// export const GET_POKEMON = 'GET_POKEMON';\nexport const PING = 'PING'\nexport const FETCH_ARTIST_DATA = 'FETCH_ARTIST_DATA'\nexport const FETCH_ARTIST_DATA_FAIL = 'FETCH_ARTIST_DATA_FAIL'\n\n// export const fetchPokemon = () => ({\n//   type: GET_POKEMON,\n// });\n//TODO (0.-) The action ping is created, with the type 'PING', this will \nexport const ping = () => ({\n  type: PING\n});\n\nexport const fetchArtistData = (artistData) =>\n  ({\n    type: FETCH_ARTIST_DATA, payload: artistData\n  });\n\nexport const fetchArtistDataFail = () =>\n  ({\n    type: FETCH_ARTIST_DATA_FAIL\n  });\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport {\n  PING,\n  FETCH_ARTIST_DATA,\n  FETCH_ARTIST_DATA_FAIL\n  // ....\n} from '../actions';\n\n\nexport const artistDataReducer = (state = {}, action) => {\n  switch (action.type) {\n    case FETCH_ARTIST_DATA:\n      return {\n        ...state\n        // [action.payload.test]: action.payload\n      }\n    case FETCH_ARTIST_DATA_FAIL:\n      return {};\n    default:\n      return state\n  }\n}\n\nexport const pingpong = (state = { isPinging: false }, action) => {\n  switch (action.type) {\n    case PING:\n      return { isPinging: true };\n    case 'PONG':\n      return { isPinging: false };\n    default:\n      return state;\n  }\n};\nexport default combineReducers({\n  artistDataReducer,\n  pingpong\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { Provider } from 'react-redux';\nimport { pingpong } from './reducers/root';\nimport { pingEpic } from './epics/index';\n\n\n\nconst epicMiddleware = createEpicMiddleware();\nconst store = createStore(pingpong, applyMiddleware(epicMiddleware));\n\nepicMiddleware.run(pingEpic);\n\n\n\n\n// const WithProvider = (\n//   <Provider store={store}>\n//     <App />\n//   </Provider>\n// );\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { ofType } from 'redux-observable';\nimport { delay, mapTo, mergeMap } from 'rxjs/operators';\nimport axios from 'axios';\nimport { Observable, from } from 'rxjs';\n\n\nexport const pingEpic = action$ =>\n  action$.pipe(\n    ofType('PING'),\n    delay(1000),\n    mapTo({ type: 'PONG' })\n  );\n\nexport const artistDataEpic = action$ =>\n  action$.pipe(\n    ofType('FETCH_ARTIST_DATA'),\n    // mergeMap(action =>\n    // from(axios.get('https://jsonplaceholder.typicode.com/todos/1'))\n    // .map(response => fetchData(response))\n    // .catch(error => Observable.ofType(FETCH_DATA_FAIL)))\n  );"],"sourceRoot":""}